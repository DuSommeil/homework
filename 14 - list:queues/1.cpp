// 1) Даны указатели P1 и Р2 на начало и конец непустой очереди. Извлекать из очереди элементы, 
// пока значение начального элемента очереди не станет четным, и выводить значения извлеченных 
// элементов (если очередь не содержит элементов с четными значениями, то извлечь все ее элементы). 
// Вывести также новые адреса начала и конца очереди (для пустой очереди дважды вывести NULL). 
// После извлечения элементов из очереди освобождать память, которую они занимали.

#include <iostream>

using namespace std;

template <typename T>
class queue_p1p2
{
private:
    struct node
    {
        T data;
        node* next;
        node(T value) : data(value), next(nullptr) {}
    };
    node* p1; // указатель на начало очереди
    node* p2; // указатель на конец очереди

public:
    queue_p1p2() : p1(nullptr), p2(nullptr) {}

    // добавление элемента в очередь
    void queue_add(T value)
    {
        node* temp = new node(value);
        if (p1 == nullptr)
        {
            p1 = temp; // если очередь пуста, новый элемент становится началом
        }
        else
        {
            p2->next = temp; // иначе добавляем элемент в конец
        }
        p2 = temp; // обновляем указатель на конец очереди
    }

    // извлечение элементов из очереди до первого четного элемента
    void queue_res()
    {
        // пока очередь не пуста и первый элемент нечетный
        while (p1 && p1->data % 2 != 0)
        {
            node* temp = p1; // сохраняем текущий начальный элемент
            cout << "Извлеченный элемент: " << temp->data << "\n"; // выводим его значение
            p1 = p1->next; // перемещаем начало очереди на следующий элемент
            delete temp; // освобождаем память
        }

        // вывод нового состояния очереди
        if (p1 == nullptr)
        {
            cout << "Новый начальный элемент: NULL, новый конечный элемент: NULL\n";
        }
        else
        {
            cout << "Начало: " << p1->data << ", конец: ";
            if (p2 != nullptr)
            {
                cout << p2->data; // выводим значение конечного элемента, если он существует
            }
            else
            {
                cout << -1; // иначе выводим -1 (этот случай не должен происходить при корректной работе)
            }
            cout << "\n";
        }
    }

    // проверка, пуста ли очередь
    bool emptyornot() const
    {
        return p1 == nullptr;
    }
};

int main()
{
    queue_p1p2<int> q;
    q.queue_add(4);
    q.queue_add(3);
    q.queue_add(6);
    q.queue_add(7);
    q.queue_add(8);
    q.queue_add(2);
    q.queue_add(3);
    q.queue_res();

    return 0;
}